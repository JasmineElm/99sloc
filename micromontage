#!/usr/bin/env bash

# shellcheck disable=SC1091
source ./library.sh # library functions
source ./99slocrc   # configuration file for 99sloc scripts

###  VARIABLES    #############################################################

# SET MORE VARIABLES VIA 99slocrc IN THIS DIRECTORY
THIS_SCRIPT="$(basename "${0}")" # this script

HELP_TEXT="stitch a soundfile together in a different way 
Usage: 
  ${THIS_SCRIPT} <input file> [<length in seconds>] [<density>] [<output file>] 
  e.g. ${THIS_SCRIPT} in.wav 6 0.8 out.wav"

###  FUNCTIONS    #############################################################

set_max_grain_length() {
  # Max grain len can't be > than the length of infile
  local input_length=$2
  local grain_length=$1
  [[ $(echo "$grain_length < $input_length" | bc) -eq 1 ]] \
    || grain_length=$(echo "$input_length * .9" | bc)
  echo "$grain_length"
}

grain_length() {
  #measured in samples, passed values should be integers
  local min_grain_len=${1:-}
  local max_grain_len=${2:-}
  lib::rand_int "$min_grain_len" 1 "$max_grain_len"
}

grain_start() {
  #file_len=$1; grain_len=$2
  local file_len=${1:-}
  local grain_len=${2:-}
  lib::rand_int 0 "$grain_len" "$((file_len - grain_len))"
}

parse_options() {
  [[ $# -eq 0 ]] && lib::print_and_exit "$HELP_TEXT" # no arg = help text
  # arg 1 = file, must exist
  if [[ -f "$1" ]]; then
    IN_FILE=$(lib::format_check "$1") # with an ext that sox can parse
    SAMPLE_RATE=$(sox::get_sample_rate "$IN_FILE")
    CHANNELS=$(sox::get_channels "$IN_FILE")
    IN_LEN=$(sox::get_length "$IN_FILE")
    MIN_GRAIN_LEN="$(util::get_duration_in_samples "$MIN_GRAIN_LEN" "$SAMPLE_RATE")"
    MAX_GRAIN_LEN="$(util::get_duration_in_samples "$MAX_GRAIN_LEN" "$SAMPLE_RATE")"

  else
    lib::print_and_exit "$HELP_TEXT"
  fi
  # arg 2 = duration in seconds must be an int, or $DEFAULT_DURATION
  [[ "${2-}" =~ ^[0-9]+$ ]] && DURATION=$2 || DURATION="$DEFAULT_DURATION"
  DURATION="$(util::get_duration_in_samples "$DURATION" "$SAMPLE_RATE")"

  DENSITY=${3:-$DENSITY} # arg 3 = density, float between 0..1

  ## arg 4 = output file, must be format that sox can handle
  OUT_FILE=${4:-$DEFAULT_OUTPUT}            # value passed, or default
  OUT_FILE=$(lib::format_check "$OUT_FILE") # with an ext that sox can parse
  util::generate_silent_file "$OUT_FILE" "$SAMPLE_RATE" "$CHANNELS" 0s
}

build_micromontage() {
  slice=0
  current_duration=0

  while [[ $current_duration -lt $DURATION ]]; do
    # echo "current duration: $current_duration"
    tmp_file=".tmp/$slice.wav"
    trim_length=$(grain_length "$MIN_GRAIN_LEN" "$MAX_GRAIN_LEN")
    trim_start=$(grain_start "$IN_LEN" "$trim_length")
    if [[ $(lib::cointoss "$DENSITY") = 'true' ]]; then
      sox "$IN_FILE" "$tmp_file" trim "$trim_start"s "$trim_length"s
    else
      util::generate_silent_file "$tmp_file" "$SAMPLE_RATE" "$CHANNELS" "$trim_length"s
    fi
    sox::append_file "$OUT_FILE" "$tmp_file"
    rm "$tmp_file"
    slice=$((slice + 1))
    current_duration=$(sox::get_length "$OUT_FILE")
    echo current duration: "$(bc <<<"scale=3; $current_duration / $SAMPLE_RATE")"
  done
  util::trim_to_length "$OUT_FILE" "$DURATION"
}

###  MAIN         #############################################################
lib::setup
parse_options "$@"
build_micromontage
lib::tidy
